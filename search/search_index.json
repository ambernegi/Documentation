{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google Maps API Documentation","text":"<p>Welcome to the comprehensive Google Maps API documentation. This guide will help you integrate Google Maps services into your applications with authentication, endpoints, and practical examples.</p> <p>The Google Maps Platform provides a suite of APIs that enable you to add location-based features to your applications, including maps, directions, geocoding, and more.</p>"},{"location":"#what-is-google-maps-api","title":"What is Google Maps API?","text":""},{"location":"#overview","title":"Overview","text":"<p>Google Maps API is a collection of web services that provide location-based functionality for your applications. It includes services for displaying maps, getting directions, geocoding addresses, and more. These APIs are designed to be easy to integrate and highly reliable, making them perfect for applications that need location-based features.</p>"},{"location":"#how-google-maps-api-works","title":"How Google Maps API Works","text":"<p>Google Maps API operates through RESTful web services:</p> <p>Authentication :</p> <ul> <li>Obtain an API key from Google Cloud Console</li> <li>Include the API key in all requests</li> <li>Set up billing and quotas for your project</li> </ul> <p>API Endpoints :</p> <ul> <li>Each service has specific endpoints (Maps, Directions, Geocoding, etc.)</li> <li>Requests are made via HTTP GET/POST</li> <li>Responses are returned in JSON format</li> </ul> <p>Rate Limiting :</p> <ul> <li>Requests are subject to quotas and rate limits</li> <li>Monitor usage through Google Cloud Console</li> <li>Implement proper error handling for exceeded limits</li> </ul>"},{"location":"#benefits-of-google-maps-api","title":"Benefits of Google Maps API","text":"<ul> <li>Comprehensive Coverage : Access to detailed maps, satellite imagery, and street view data worldwide</li> <li>Scalability : Handles millions of requests with high availability and performance</li> <li>Flexibility : Multiple APIs for different use cases (Maps, Directions, Geocoding, Places, etc.)</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"Developer's Guide <p>Overview, onboarding process, known limitations, and frequently asked questions.</p> How-to Guide <p>Prerequisites, getting started tutorials, and advanced query examples.</p> Code Samples <p>Complete code examples for different API requests in Python and Java.</p> Reference Guide <p>Complete reference documentation for all endpoints, parameters, and responses.</p> Change History <p>Version history and changelog for the Google Maps API documentation.</p> Design Thinking Process &amp; Impact <p>My approach to documentation design, user research, and continuous improvement.</p>"},{"location":"change-history/","title":"Change History","text":"<p>Version history and changelog for Google Maps API documentation.</p>"},{"location":"change-history/#version-110-july-12-2025","title":"Version 1.1.0 - July 12, 2025","text":""},{"location":"change-history/#new-features","title":"New Features","text":"<ul> <li>Restructured Documentation: Reorganized content into five main sections:<ul> <li>Developer's Guide (overview, onboarding, limitations, FAQ)</li> <li>How-to Guide (prerequisites, getting started, advanced queries)</li> <li>Code Samples (complete examples for different requests)</li> <li>Reference Guide (comprehensive API documentation)</li> <li>Change History (version tracking)</li> </ul> </li> </ul>"},{"location":"change-history/#content-updates","title":"Content Updates","text":"<ul> <li>Developer's Guide: Added comprehensive overview, step-by-step onboarding process, known limitations, and extensive FAQ section</li> <li>How-to Guide: Created detailed tutorials with prerequisites, getting started guides, and advanced query examples</li> <li>Code Samples: Added complete working examples for Python and Java covering all major API endpoints</li> <li>Reference Guide: Comprehensive reference documentation with all endpoints, parameters, and response formats</li> </ul>"},{"location":"code-samples/","title":"Code Samples","text":"<p>This page provides complete, working code samples for different Google Maps API requests in Python and Java.</p>"},{"location":"code-samples/#basic-setup","title":"Basic Setup","text":"PythonJava <pre><code>import requests\nimport os\nfrom typing import Dict, List, Optional\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\nclass GoogleMapsAPI:\n    def__init__(self, api_key: str = None):\n        self.api_key = api_key or os.getenv(\"GOOGLE_MAPS_API_KEY\")\n        if not self.api_key:\n            raise ValueError(\"API key not provided and GOOGLE_MAPS_API_KEY not found in environment\")\n\nself.base_url = \"https://maps.googleapis.com/maps/api\"\n\ndef make_request(self, endpoint: str, params: Dict) -&gt; Optional[Dict]:\n        \"\"\"Make a request to Google Maps API.\"\"\"\n        url = f\"{self.base_url}/{endpoint}\"\n        params[\"key\"] = self.api_key\n\ntry:\n            response = requests.get(url, params=params)\n            response.raise_for_status()\n            return response.json()\n        except requests.RequestException as e:\n            print(f\"Request failed: {e}\")\n            return None\n</code></pre> <pre><code>import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\npublic class GoogleMapsAPI {\n    private final String apiKey;\n    private final String baseUrl = \"https://maps.googleapis.com/maps/api\";\n    private final HttpClient client = HttpClient.newHttpClient();\n    private final Gson gson = new Gson();\n\npublic GoogleMapsAPI(String apiKey) {\n        this.apiKey = apiKey != null ? apiKey : System.getenv(\"GOOGLE_MAPS_API_KEY\");\n        if (this.apiKey == null || this.apiKey.isEmpty()) {\n            throw new IllegalStateException(\"API key not provided and GOOGLE_MAPS_API_KEY not found in environment\");\n        }\n    }\n\npublic JsonObject makeRequest(String endpoint, Map&lt;String, String&gt; params) throws Exception {\n        StringBuilder urlBuilder = new StringBuilder(baseUrl + \"/\" + endpoint + \"?\");\n        params.put(\"key\", apiKey);\n\nfor (Map.Entry&lt;String, String&gt; entry : params.entrySet()) {\n            urlBuilder.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8))\n                     .append(\"=\")\n                     .append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8))\n                     .append(\"&amp;\");\n        }\n\nString url = urlBuilder.toString();\n        if (url.endsWith(\"&amp;\")) {\n            url = url.substring(0, url.length() - 1);\n        }\n\nHttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .build();\n\nHttpResponse`&lt;String&gt;` response = client.send(request,\n            HttpResponse.BodyHandlers.ofString());\n\nreturn gson.fromJson(response.body(), JsonObject.class);\n    }\n}\n</code></pre>"},{"location":"code-samples/#geocoding-examples","title":"Geocoding Examples","text":""},{"location":"code-samples/#forward-geocoding","title":"Forward Geocoding","text":"PythonJava <pre><code>def geocode_address(address: str) -&gt; Optional[Dict]:\n    \"\"\"Convert address to coordinates.\"\"\"\n    api = GoogleMapsAPI()\n\nparams = {\"address\": address}\n    response = api.make_request(\"geocode/json\", params)\n\nif response and response[\"status\"] == \"OK\":\n        result = response[\"results\"][0]\n        location = result[\"geometry\"][\"location\"]\n\nreturn {\n            \"address\": result[\"formatted_address\"],\n            \"latitude\": location[\"lat\"],\n            \"longitude\": location[\"lng\"],\n            \"place_id\": result[\"place_id\"]\n        }\n    return None\n\n# Example usage\nresult = geocode_address(\"1600 Amphitheatre Parkway, Mountain View, CA\")\nif result:\n    print(f\"Address: {result['address']}\")\n    print(f\"Coordinates: {result['latitude']}, {result['longitude']}\")\n</code></pre> <pre><code>public GeocodingResult geocodeAddress(String address) throws Exception {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"address\", address);\n\nJsonObject response = api.makeRequest(\"geocode/json\", params);\n\nif (response != null &amp;&amp; \"OK\".equals(response.get(\"status\").getAsString())) {\n        JsonObject result = response.getAsJsonArray(\"results\").get(0).getAsJsonObject();\n        JsonObject geometry = result.getAsJsonObject(\"geometry\");\n        JsonObject location = geometry.getAsJsonObject(\"location\");\n\nreturn new GeocodingResult(\n            result.get(\"formatted_address\").getAsString(),\n            location.get(\"lat\").getAsDouble(),\n            location.get(\"lng\").getAsDouble(),\n            result.get(\"place_id\").getAsString()\n        );\n    }\n    return null;\n}\n\npublic class GeocodingResult {\n    private final String address;\n    private final double latitude;\n    private final double longitude;\n    private final String placeId;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"code-samples/#reverse-geocoding","title":"Reverse Geocoding","text":"PythonJava <pre><code>def reverse_geocode(lat: float, lng: float) -&gt; Optional[str]:\n    \"\"\"Convert coordinates to address.\"\"\"\n    api = GoogleMapsAPI()\n\nparams = {\"latlng\": f\"{lat},{lng}\"}\n    response = api.make_request(\"geocode/json\", params)\n\nif response and response[\"status\"] == \"OK\":\n        return response[\"results\"][0][\"formatted_address\"]\n    return None\n\n# Example usage\naddress = reverse_geocode(37.4221, -122.0841)\nif address:\n    print(f\"Address: {address}\")\n</code></pre> <pre><code>public String reverseGeocode(double lat, double lng) throws Exception {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"latlng\", lat + \",\" + lng);\n\nJsonObject response = api.makeRequest(\"geocode/json\", params);\n\nif (response != null &amp;&amp; \"OK\".equals(response.get(\"status\").getAsString())) {\n        return response.getAsJsonArray(\"results\").get(0).getAsJsonObject()\n            .get(\"formatted_address\").getAsString();\n    }\n    return null;\n}\n</code></pre>"},{"location":"code-samples/#directions-examples","title":"Directions Examples","text":""},{"location":"code-samples/#basic-directions","title":"Basic Directions","text":"PythonJava <pre><code>def get_directions(origin: str, destination: str, mode: str = \"driving\") -&gt; Optional[Dict]:\n    \"\"\"Get directions between two locations.\"\"\"\n    api = GoogleMapsAPI()\n\nparams = {\n        \"origin\": origin,\n        \"destination\": destination,\n        \"mode\": mode\n    }\n\nresponse = api.make_request(\"directions/json\", params)\n\nif response and response[\"status\"] == \"OK\":\n        route = response[\"routes\"][0]\n        leg = route[\"legs\"][0]\n\nreturn {\n            \"distance\": leg[\"distance\"][\"text\"],\n            \"duration\": leg[\"duration\"][\"text\"],\n            \"start_address\": leg[\"start_address\"],\n            \"end_address\": leg[\"end_address\"],\n            \"steps\": [step[\"html_instructions\"] for step in leg[\"steps\"]]\n        }\n    return None\n\n# Example usage\ndirections = get_directions(\"New York, NY\", \"Boston, MA\", \"driving\")\nif directions:\n    print(f\"Distance: {directions['distance']}\")\n    print(f\"Duration: {directions['duration']}\")\n</code></pre> <pre><code>public DirectionsResult getDirections(String origin, String destination, String mode) throws Exception {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"origin\", origin);\n    params.put(\"destination\", destination);\n    params.put(\"mode\", mode);\n\nJsonObject response = api.makeRequest(\"directions/json\", params);\n\nif (response != null &amp;&amp; \"OK\".equals(response.get(\"status\").getAsString())) {\n        JsonObject route = response.getAsJsonArray(\"routes\").get(0).getAsJsonObject();\n        JsonObject leg = route.getAsJsonArray(\"legs\").get(0).getAsJsonObject();\n\nList`&lt;String&gt;` steps = new ArrayList&lt;&gt;();\n        JsonArray stepsArray = leg.getAsJsonArray(\"steps\");\n        for (int i = 0; i &lt; stepsArray.size(); i++) {\n            steps.add(stepsArray.get(i).getAsJsonObject().get(\"html_instructions\").getAsString());\n        }\n\nreturn new DirectionsResult(\n            leg.getAsJsonObject(\"distance\").get(\"text\").getAsString(),\n            leg.getAsJsonObject(\"duration\").get(\"text\").getAsString(),\n            leg.get(\"start_address\").getAsString(),\n            leg.get(\"end_address\").getAsString(),\n            steps\n        );\n    }\n    return null;\n}\n\npublic class DirectionsResult {\n    private final String distance;\n    private final String duration;\n    private final String startAddress;\n    private final String endAddress;\n    private final List`&lt;String&gt;` steps;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"code-samples/#multi-waypoint-directions","title":"Multi-Waypoint Directions","text":"PythonJava <pre><code>def get_multi_waypoint_directions(origin: str, destination: str, waypoints: List[str]) -&gt; Optional[Dict]:\n    \"\"\"Get directions with multiple waypoints.\"\"\"\n    api = GoogleMapsAPI()\n\nparams = {\n        \"origin\": origin,\n        \"destination\": destination,\n        \"waypoints\": \"|\".join(waypoints),\n        \"optimize\": \"true\"\n    }\n\nresponse = api.make_request(\"directions/json\", params)\n\nif response and response[\"status\"] == \"OK\":\n        route = response[\"routes\"][0]\n        legs = route[\"legs\"]\n\nreturn {\n            \"total_distance\": sum(leg[\"distance\"][\"value\"] for leg in legs),\n            \"total_duration\": sum(leg[\"duration\"][\"value\"] for leg in legs),\n            \"waypoint_order\": route.get(\"waypoint_order\", []),\n            \"legs\": [\n                {\n                    \"start\": leg[\"start_address\"],\n                    \"end\": leg[\"end_address\"],\n                    \"distance\": leg[\"distance\"][\"text\"],\n                    \"duration\": leg[\"duration\"][\"text\"]\n                }\n                for leg in legs\n            ]\n        }\n    return None\n\n# Example usage\nwaypoints = [\"Sacramento, CA\", \"Fresno, CA\"]\nroute = get_multi_waypoint_directions(\"San Francisco, CA\", \"Los Angeles, CA\", waypoints)\nif route:\n    print(f\"Total distance: {route['total_distance']} meters\")\n    print(f\"Total duration: {route['total_duration']} seconds\")\n</code></pre> <pre><code>public MultiWaypointResult getMultiWaypointDirections(String origin, String destination, List `&lt;String&gt;` waypoints) throws Exception {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"origin\", origin);\n    params.put(\"destination\", destination);\n    params.put(\"waypoints\", String.join(\"|\", waypoints));\n    params.put(\"optimize\", \"true\");\n\nJsonObject response = api.makeRequest(\"directions/json\", params);\n\nif (response != null &amp;&amp; \"OK\".equals(response.get(\"status\").getAsString())) {\n        JsonObject route = response.getAsJsonArray(\"routes\").get(0).getAsJsonObject();\n        JsonArray legs = route.getAsJsonArray(\"legs\");\n\nint totalDistance = 0;\n        int totalDuration = 0;\n        List`&lt;LegInfo&gt;` legInfos = new ArrayList&lt;&gt;();\n\nfor (int i = 0; i &lt; legs.size(); i++) {\n            JsonObject leg = legs.get(i).getAsJsonObject();\n            totalDistance += leg.getAsJsonObject(\"distance\").get(\"value\").getAsInt();\n            totalDuration += leg.getAsJsonObject(\"duration\").get(\"value\").getAsInt();\n\nlegInfos.add(new LegInfo(\n                leg.get(\"start_address\").getAsString(),\n                leg.get(\"end_address\").getAsString(),\n                leg.getAsJsonObject(\"distance\").get(\"text\").getAsString(),\n                leg.getAsJsonObject(\"duration\").get(\"text\").getAsString()\n            ));\n        }\n\nreturn new MultiWaypointResult(totalDistance, totalDuration, legInfos);\n    }\n    return null;\n}\n\npublic class MultiWaypointResult {\n    private final int totalDistance;\n    private final int totalDuration;\n    private final List`&lt;LegInfo&gt;` legs;\n\n// Constructor and getters\n}\n\npublic class LegInfo {\n    private final String start;\n    private final String end;\n    private final String distance;\n    private final String duration;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"code-samples/#places-examples","title":"Places Examples","text":""},{"location":"code-samples/#find-place","title":"Find Place","text":"PythonJava <pre><code>def find_place(input_text: str, input_type: str = \"textquery\") -&gt; Optional[Dict]:\n    \"\"\"Find a place using text input.\"\"\"\n    api = GoogleMapsAPI()\n\nparams = {\n        \"input\": input_text,\n        \"inputtype\": input_type,\n        \"fields\": \"formatted_address,name,geometry,place_id\"\n    }\n\nresponse = api.make_request(\"place/findplacefromtext/json\", params)\n\nif response and response[\"status\"] == \"OK\":\n        candidate = response[\"candidates\"][0]\n        location = candidate[\"geometry\"][\"location\"]\n\nreturn {\n            \"name\": candidate[\"name\"],\n            \"address\": candidate[\"formatted_address\"],\n            \"latitude\": location[\"lat\"],\n            \"longitude\": location[\"lng\"],\n            \"place_id\": candidate[\"place_id\"]\n        }\n    return None\n\n# Example usage\nplace = find_place(\"Museum of Modern Art\")\nif place:\n    print(f\"Found: {place['name']}\")\n    print(f\"Address: {place['address']}\")\n</code></pre> <pre><code>public PlaceResult findPlace(String inputText, String inputType) throws Exception {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"input\", inputText);\n    params.put(\"inputtype\", inputType);\n    params.put(\"fields\", \"formatted_address,name,geometry,place_id\");\n\nJsonObject response = api.makeRequest(\"place/findplacefromtext/json\", params);\n\nif (response != null &amp;&amp; \"OK\".equals(response.get(\"status\").getAsString())) {\n        JsonObject candidate = response.getAsJsonArray(\"candidates\").get(0).getAsJsonObject();\n        JsonObject location = candidate.getAsJsonObject(\"geometry\").getAsJsonObject(\"location\");\n\nreturn new PlaceResult(\n            candidate.get(\"name\").getAsString(),\n            candidate.get(\"formatted_address\").getAsString(),\n            location.get(\"lat\").getAsDouble(),\n            location.get(\"lng\").getAsDouble(),\n            candidate.get(\"place_id\").getAsString()\n        );\n    }\n    return null;\n}\n\npublic class PlaceResult {\n    private final String name;\n    private final String address;\n    private final double latitude;\n    private final double longitude;\n    private final String placeId;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"code-samples/#nearby-search","title":"Nearby Search","text":"PythonJava <pre><code>def nearby_search(lat: float, lng: float, radius: int, place_type: str = None) -&gt; List[Dict]:\n    \"\"\"Find places near a location.\"\"\"\n    api = GoogleMapsAPI()\n\nparams = {\n        \"location\": f\"{lat},{lng}\",\n        \"radius\": str(radius)\n    }\n\nif place_type:\n        params[\"type\"] = place_type\n\nresponse = api.make_request(\"place/nearbysearch/json\", params)\n\nif response and response[\"status\"] == \"OK\":\n        places = []\n        for place in response[\"results\"]:\n            places.append({\n                \"name\": place[\"name\"],\n                \"rating\": place.get(\"rating\"),\n                \"vicinity\": place[\"vicinity\"],\n                \"types\": place[\"types\"]\n            })\n        return places\n    return []\n\n# Example usage\nplaces = nearby_search(37.7749, -122.4194, 1000, \"restaurant\")\nfor place in places:\n    print(f\"Restaurant: {place['name']}\")\n    print(f\"Rating: {place['rating']}\")\n    print(f\"Address: {place['vicinity']}\")\n    print(\"---\")\n</code></pre> <pre><code>public List `&lt;NearbyPlace&gt;` nearbySearch(double lat, double lng, int radius, String placeType) throws Exception {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"location\", lat + \",\" + lng);\n    params.put(\"radius\", String.valueOf(radius));\n\nif (placeType != null) {\n        params.put(\"type\", placeType);\n    }\n\nJsonObject response = api.makeRequest(\"place/nearbysearch/json\", params);\n\nif (response != null &amp;&amp; \"OK\".equals(response.get(\"status\").getAsString())) {\n        List`&lt;NearbyPlace&gt;` places = new ArrayList&lt;&gt;();\n        JsonArray results = response.getAsJsonArray(\"results\");\n\nfor (int i = 0; i &lt; results.size(); i++) {\n            JsonObject place = results.get(i).getAsJsonObject();\n\nList`&lt;String&gt;` types = new ArrayList&lt;&gt;();\n            JsonArray typesArray = place.getAsJsonArray(\"types\");\n            for (int j = 0; j &lt; typesArray.size(); j++) {\n                types.add(typesArray.get(j).getAsString());\n            }\n\nplaces.add(new NearbyPlace(\n                place.get(\"name\").getAsString(),\n                place.has(\"rating\") ? place.get(\"rating\").getAsDouble() : 0.0,\n                place.get(\"vicinity\").getAsString(),\n                types\n            ));\n        }\n        return places;\n    }\n    return new ArrayList&lt;&gt;();\n}\n\npublic class NearbyPlace {\n    private final String name;\n    private final double rating;\n    private final String vicinity;\n    private final List`&lt;String&gt;` types;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"code-samples/#distance-matrix-examples","title":"Distance Matrix Examples","text":""},{"location":"code-samples/#calculate-distances","title":"Calculate Distances","text":"PythonJava <pre><code>def calculate_distances(origins: List[str], destinations: List[str], mode: str = \"driving\") -&gt; List[Dict]:\n    \"\"\"Calculate distances between multiple origins and destinations.\"\"\"\n    api = GoogleMapsAPI()\n\nparams = {\n        \"origins\": \"|\".join(origins),\n        \"destinations\": \"|\".join(destinations),\n        \"mode\": mode\n    }\n\nresponse = api.make_request(\"distancematrix/json\", params)\n\nif response and response[\"status\"] == \"OK\":\n        results = []\n        rows = response[\"rows\"]\n\nfor i, row in enumerate(rows):\n            origin = response[\"origin_addresses\"][i]\n            elements = row[\"elements\"]\n\nfor j, element in enumerate(elements):\n                destination = response[\"destination_addresses\"][j]\n\nif element[\"status\"] == \"OK\":\n                    results.append({\n                        \"origin\": origin,\n                        \"destination\": destination,\n                        \"distance\": element[\"distance\"][\"text\"],\n                        \"duration\": element[\"duration\"][\"text\"]\n                    })\n\nreturn results\n    return []\n\n# Example usage\norigins = [\"New York, NY\", \"Boston, MA\"]\ndestinations = [\"Washington, DC\", \"Philadelphia, PA\"]\n\ndistances = calculate_distances(origins, destinations)\nfor result in distances:\n    print(f\"{result['origin']} \u2192 {result['destination']}\")\n    print(f\"  Distance: {result['distance']}\")\n    print(f\"  Duration: {result['duration']}\")\n    print()\n</code></pre> <pre><code>public List `&lt;DistanceResult&gt;` calculateDistances(List `&lt;String&gt;` origins, List `&lt;String&gt;` destinations, String mode) throws Exception {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"origins\", String.join(\"|\", origins));\n    params.put(\"destinations\", String.join(\"|\", destinations));\n    params.put(\"mode\", mode);\n\nJsonObject response = api.makeRequest(\"distancematrix/json\", params);\n\nif (response != null &amp;&amp; \"OK\".equals(response.get(\"status\").getAsString())) {\n        List`&lt;DistanceResult&gt;` results = new ArrayList&lt;&gt;();\n        JsonArray rows = response.getAsJsonArray(\"rows\");\n        JsonArray originAddresses = response.getAsJsonArray(\"origin_addresses\");\n        JsonArray destinationAddresses = response.getAsJsonArray(\"destination_addresses\");\n\nfor (int i = 0; i &lt; rows.size(); i++) {\n            String origin = originAddresses.get(i).getAsString();\n            JsonObject row = rows.get(i).getAsJsonObject();\n            JsonArray elements = row.getAsJsonArray(\"elements\");\n\nfor (int j = 0; j &lt; elements.size(); j++) {\n                String destination = destinationAddresses.get(j).getAsString();\n                JsonObject element = elements.get(j).getAsJsonObject();\n\nif (\"OK\".equals(element.get(\"status\").getAsString())) {\n                    results.add(new DistanceResult(\n                        origin,\n                        destination,\n                        element.getAsJsonObject(\"distance\").get(\"text\").getAsString(),\n                        element.getAsJsonObject(\"duration\").get(\"text\").getAsString()\n                    ));\n                }\n            }\n        }\n        return results;\n    }\n    return new ArrayList&lt;&gt;();\n}\n\npublic class DistanceResult {\n    private final String origin;\n    private final String destination;\n    private final String distance;\n    private final String duration;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"code-samples/#error-handling-examples","title":"Error Handling Examples","text":"PythonJava <pre><code>def safe_api_call(endpoint: str, params: Dict) -&gt; Dict:\n    \"\"\"Make a safe API call with comprehensive error handling.\"\"\"\n    api = GoogleMapsAPI()\n\ntry:\n        response = api.make_request(endpoint, params)\n\nif not response:\n            return {\"success\": False, \"error\": \"No response from API\"}\n\nstatus = response.get(\"status\")\n\nif status == \"OK\":\n            return {\"success\": True, \"data\": response}\n        elif status == \"ZERO_RESULTS\":\n            return {\"success\": False, \"error\": \"No results found\"}\n        elif status == \"OVER_QUERY_LIMIT\":\n            return {\"success\": False, \"error\": \"Quota exceeded\"}\n        elif status == \"REQUEST_DENIED\":\n            return {\"success\": False, \"error\": \"API key invalid or restricted\"}\n        elif status == \"INVALID_REQUEST\":\n            return {\"success\": False, \"error\": \"Invalid request parameters\"}\n        else:\n            return {\"success\": False, \"error\": f\"Unknown error: {status}\"}\n\nexcept requests.RequestException as e:\n        return {\"success\": False, \"error\": f\"Network error: {e}\"}\n    except Exception as e:\n        return {\"success\": False, \"error\": f\"Unexpected error: {e}\"}\n\n# Usage\nresult = safe_api_call(\"geocode/json\", {\"address\": \"Test Address\"})\nif result[\"success\"]:\n    print(\"API call successful\")\n    # Process result[\"data\"]\nelse:\n    print(f\"Error: {result['error']}\")\n</code></pre> <pre><code>public ApiResult safeApiCall(String endpoint, Map&lt;String, String&gt; params) {\n    GoogleMapsAPI api = new GoogleMapsAPI();\n\ntry {\n        JsonObject response = api.makeRequest(endpoint, params);\n\nif (response == null) {\n            return new ApiResult(false, null, \"No response from API\");\n        }\n\nString status = response.get(\"status\").getAsString();\n\nswitch (status) {\n            case \"OK\":\n                return new ApiResult(true, response, null);\n            case \"ZERO_RESULTS\":\n                return new ApiResult(false, null, \"No results found\");\n            case \"OVER_QUERY_LIMIT\":\n                return new ApiResult(false, null, \"Quota exceeded\");\n            case \"REQUEST_DENIED\":\n                return new ApiResult(false, null, \"API key invalid or restricted\");\n            case \"INVALID_REQUEST\":\n                return new ApiResult(false, null, \"Invalid request parameters\");\n            default:\n                return new ApiResult(false, null, \"Unknown error: \" + status);\n        }\n\n} catch (Exception e) {\n        return new ApiResult(false, null, \"Error: \" + e.getMessage());\n    }\n}\n\npublic class ApiResult {\n    private final boolean success;\n    private final JsonObject data;\n    private final String error;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"code-samples/#next-steps","title":"Next Steps","text":"<ul> <li>Read the How-to Guide for step-by-step tutorials</li> <li>Check the Reference Guide for detailed API documentation</li> <li>Review Change History for recent updates</li> </ul>"},{"location":"design-thinking/","title":"Design Thinking: Process &amp; Impact","text":"<p>My approach to documentation and design is rooted in empathy, clarity, and continuous improvement. I believe that great documentation should not only inform but also empower developers or aspiring developers to build amazing applications.</p>"},{"location":"design-thinking/#my-design-philosophy","title":"My Design Philosophy","text":""},{"location":"design-thinking/#user-centered-approach","title":"User-Centered Approach","text":"<p>Focus on understanding the real needs and objectives of our audience, prioritizing substance over unnecessary features. Every design decision should be made with the developer experience in mind.</p>"},{"location":"design-thinking/#accessibility-first","title":"Accessibility First","text":"<p>With over 70% of developers preferring dark themes in their IDEs, documentation should feel just as welcoming. To do that, both dark and light modes are available, ensuring comfort and accessibility for every user. Proper contrast ratios, along with supporting keyboard navigation, are supported to cater to diverse preferences.</p>"},{"location":"design-thinking/#clear-step-by-step-journey","title":"Clear, Step-by-Step Journey","text":"<p>The documentation is structured to answer the what, why, and how of each service or API. Not everyone requires the same depth. The structure helps users find exactly what they need.</p>"},{"location":"design-thinking/#write-for-a-wide-audience-base","title":"Write for a Wide Audience Base","text":"<p>Whether a college student experimenting with an API or a CTO evaluating solutions for a large enterprise, the documentation should provide value for everyone. For example, a CTO should be able to look at documentation to understand API pricing and evaluate whether it will help their team meet next quarter's business goals.</p>"},{"location":"design-thinking/#ideas","title":"Ideas","text":""},{"location":"design-thinking/#users-also-viewed","title":"Users also Viewed","text":"<p>Based on past data and analytics, and tracking browser behaviour or traffic on our platforms (if possible), we can recommend similar APIs or an API that a user might need after this, using a recommendation system. A section like \"Users Also Viewed\". This can be one of the strategies to get more eyes on our other APIs or services, benefiting both the business and the user.</p>"},{"location":"design-thinking/#ai-search","title":"AI Search","text":"<p>An AI search feature that can help a user find the exact location of the content they are looking for.</p>"},{"location":"design-thinking/#conclusion","title":"Conclusion","text":"<p>By combining empathy, user research, iterative design, and continuous improvements driven by innovative ideas, we create documentation that is not only informative but also empowering and enjoyable to use. Our design thinking process ensures that every aspect of the documentation serves the needs of our developer community, demonstrating our genuine commitment to their experience.</p>"},{"location":"developers-guide/","title":"Developer's Guide","text":"<p>This guide provides an overview of Google Maps API, onboarding process, known limitations, and frequently asked questions.</p>"},{"location":"developers-guide/#overview","title":"Overview","text":"<p>Google Maps API is a comprehensive suite of web services that enables developers to integrate location-based functionality into their applications. The platform provides access to detailed maps, geocoding services, directions, and place information.</p>"},{"location":"developers-guide/#key-features","title":"Key Features","text":"<ul> <li>Maps JavaScript API: Embed interactive maps in web applications</li> <li>Geocoding API: Convert addresses to coordinates and vice versa</li> <li>Directions API: Calculate routes between locations</li> <li>Places API: Search for places and get detailed information</li> <li>Distance Matrix API: Calculate distances between multiple origins and destinations</li> </ul>"},{"location":"developers-guide/#architecture","title":"Architecture","text":"<p>Google Maps API follows a RESTful architecture:</p> <pre><code>Client Application \u2192 HTTPS Request \u2192 Google Maps API \u2192 JSON Response\n</code></pre> <p>All requests are made over HTTPS with JSON responses, ensuring secure and efficient communication.</p>"},{"location":"developers-guide/#onboarding","title":"Onboarding","text":""},{"location":"developers-guide/#step-1-create-a-google-cloud-project","title":"Step 1: Create a Google Cloud Project","text":"<ol> <li>Go to the Google Cloud Console</li> <li>Click Select a project &gt; New Project</li> <li>Enter a project name and click Create</li> <li>Note your Project ID for future reference</li> </ol>"},{"location":"developers-guide/#step-2-enable-apis","title":"Step 2: Enable APIs","text":"<ol> <li>In the Google Cloud Console, go to APIs &amp; Services &gt; Library</li> <li>Search for and enable the APIs you need:</li> <li>Maps JavaScript API</li> <li>Geocoding API</li> <li>Directions API</li> <li>Places API</li> <li>Distance Matrix API</li> </ol>"},{"location":"developers-guide/#step-3-create-api-keys","title":"Step 3: Create API Keys","text":"<ol> <li>Go to APIs &amp; Services &gt; Credentials</li> <li>Click Create Credentials &gt; API Key</li> <li>Copy the generated API key</li> <li>Click Restrict Key to set up security restrictions</li> </ol>"},{"location":"developers-guide/#step-4-set-up-billing","title":"Step 4: Set Up Billing","text":"<ol> <li>Go to Billing in Google Cloud Console</li> <li>Link a billing account to your project</li> <li>Set up budget alerts to monitor usage</li> </ol>"},{"location":"developers-guide/#step-5-test-your-setup","title":"Step 5: Test Your Setup","text":"PythonJava <pre><code>import requests\n\ndef test_api_setup(api_key):\n    \"\"\"Test if your API key is working.\"\"\"\n    url = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    params = {\n        \"address\": \"1600 Amphitheatre Parkway, Mountain View, CA\",\n        \"key\": api_key\n    }\n\nresponse = requests.get(url, params=params)\n    data = response.json()\n\nif data[\"status\"] == \"OK\":\n        print(\"API key is working correctly!\")\n        return True\n    else:\n        print(f\"API key error: {data['status']}\")\n        return False\n\n# Test your API key\ntest_api_setup(\"YOUR_API_KEY\")\n</code></pre> <pre><code>import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\n\npublic class APITest {\n    public static boolean testApiSetup(String apiKey) throws Exception {\n        String url = String.format(\n            \"https://maps.googleapis.com/maps/api/geocode/json?address=%s&amp;key=%s\",\n            \"1600 Amphitheatre Parkway, Mountain View, CA\",\n            apiKey\n        );\n\nHttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .build();\n\nHttpResponse`&lt;String&gt;` response = client.send(request,\n            HttpResponse.BodyHandlers.ofString());\n\nif (response.body().contains(\"\\\"status\\\":\\\"OK\\\"\")) {\n            System.out.println(\"API key is working correctly!\");\n            return true;\n        } else {\n            System.out.println(\"API key error: \" + response.body());\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"developers-guide/#known-limitations","title":"Known Limitations","text":""},{"location":"developers-guide/#rate-limits","title":"Rate Limits","text":"Service Free Tier Limit Paid Tier Limit Geocoding API 2,500 requests/day 100,000 requests/day Directions API 2,500 requests/day 100,000 requests/day Places API 1,000 requests/day 150,000 requests/day Distance Matrix API 100 requests/day 100,000 requests/day"},{"location":"developers-guide/#geographic-restrictions","title":"Geographic Restrictions","text":"<ul> <li>Some APIs may have limited coverage in certain regions</li> <li>Street View data is not available in all locations</li> <li>Real-time traffic data varies by region</li> </ul>"},{"location":"developers-guide/#data-accuracy","title":"Data Accuracy","text":"<ul> <li>Geocoding results may vary in accuracy based on address quality</li> <li>Place information may be outdated in rapidly changing areas</li> <li>Directions may not reflect real-time road conditions</li> </ul>"},{"location":"developers-guide/#technical-limitations","title":"Technical Limitations","text":"<ul> <li>Maximum URL length: 8,192 characters</li> <li>Maximum request size: 8KB</li> <li>Response size limits vary by API</li> <li>Concurrent request limits apply</li> </ul>"},{"location":"developers-guide/#billing-considerations","title":"Billing Considerations","text":"<ul> <li>Free tier provides $200 monthly credit</li> <li>Usage beyond the free tier incurs charges</li> <li>Budget alerts help prevent unexpected charges</li> <li>Quota exceeded requests return error 429</li> </ul>"},{"location":"developers-guide/#faq","title":"FAQ","text":""},{"location":"developers-guide/#general-questions","title":"General Questions","text":"<p>How much does Google Maps API cost?</p> <p>Google Maps API offers a generous free tier with $200 monthly credit. Beyond that, pricing varies by service, typically $0.005-$0.017 per request.</p> <p>Do I need a credit card to use the API?</p> <p>Yes, a billing account is required even for free tier usage. This helps Google prevent abuse and allows for usage monitoring.</p> <p>Can I use the API for commercial applications?</p> <p>Yes, Google Maps API can be used for commercial applications, but you must comply with the Terms of Service and attribution requirements.</p>"},{"location":"developers-guide/#technical-questions","title":"Technical Questions","text":"<p>How do I handle API errors?</p> <p>Always check the <code>status</code> field in API responses. Common status codes include <code>OK</code>, <code>ZERO_RESULTS</code>, <code>OVER_QUERY_LIMIT</code>, and <code>REQUEST_DENIED</code>.</p> <p>Can I cache API responses?</p> <p>Limited caching is allowed, but you cannot store map tiles or imagery for extended periods. Check the Terms of Service for specific guidelines.</p> <p>How do I implement rate limiting?</p> <p>Monitor your request count and implement delays when approaching limits. Use exponential backoff for retry logic.</p>"},{"location":"developers-guide/#security-questions","title":"Security Questions","text":"<p>How do I secure my API key?</p> <p>Restrict your API key to specific domains/IPs, use environment variables, and never expose keys in client-side code.</p> <p>What if my API key is compromised?</p> <p>Immediately regenerate the key in Google Cloud Console and update your applications. Monitor for unusual usage patterns.</p> <p>Can I use the API server-side only?</p> <p>Yes, server-side usage is recommended for sensitive operations as it keeps your API key secure.</p>"},{"location":"developers-guide/#integration-questions","title":"Integration Questions","text":"<p>Which programming languages are supported?</p> <p>Google Maps API is language-agnostic. Any language that can make HTTP requests can use the API. Official libraries are available for JavaScript, Python, Java, and other languages.</p> <p>How do I handle mobile applications?</p> <p>For mobile apps, use the Maps SDK for Android or iOS. For web apps, use the Maps JavaScript API.</p> <p>Can I use the API offline?</p> <p>No, Google Maps API requires an internet connection. Consider downloading the necessary data for offline scenarios.</p>"},{"location":"developers-guide/#billing-questions","title":"Billing Questions","text":"<p>How do I monitor my usage?</p> <p>Use the Google Cloud Console to monitor API usage, set up billing alerts, and track costs by service.</p> <p>What happens if I exceed my quota?</p> <p>Requests will return error 429 (Too Many Requests). Implement proper error handling and consider upgrading your quota.</p> <p>Can I get a refund for accidental charges?</p> <p>Contact Google Cloud Support for billing issues. They may provide credits for legitimate mistakes.</p>"},{"location":"developers-guide/#support-questions","title":"Support Questions","text":"<p>Where can I get help with the API?</p> <p>Check the official documentation, Stack Overflow, or contact Google Cloud Support for technical issues.</p> <p>Is there a community forum?</p> <p>Yes, the Google Maps Platform community forum is available for developers to ask questions and share solutions.</p> <p>How do I report bugs?</p> <p>Use the Google Cloud Console to report issues or contact support directly for critical problems.</p>"},{"location":"developers-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Read the How-to Guide for step-by-step tutorials</li> <li>Check Code Samples for implementation examples</li> <li>Review the Reference Guide for detailed API documentation</li> </ul>"},{"location":"how-to-guide/","title":"How-to Guide","text":"<p>This guide provides step-by-step tutorials for using Google Maps API, from basic setup to advanced queries.</p>"},{"location":"how-to-guide/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p>"},{"location":"how-to-guide/#required-accounts","title":"Required Accounts","text":"<ul> <li>Google Cloud Account: Free account with billing enabled</li> <li>Google Cloud Project: Active project with APIs enabled</li> <li>API Keys: Generated and restricted API keys</li> </ul>"},{"location":"how-to-guide/#development-environment","title":"Development Environment","text":"<ul> <li>Python 3.7+ or Java 11+</li> <li>HTTP client library (requests for Python, HttpClient for Java)</li> <li>JSON parser (built-in for Python, Gson for Java)</li> <li>Text editor or IDE</li> </ul>"},{"location":"how-to-guide/#knowledge-requirements","title":"Knowledge Requirements","text":"<ul> <li>Basic understanding of HTTP requests</li> <li>Familiarity with JSON data format</li> <li>Understanding of RESTful APIs</li> <li>Basic programming concepts</li> </ul>"},{"location":"how-to-guide/#getting-started","title":"Getting Started","text":""},{"location":"how-to-guide/#1-basic-authentication-setup","title":"1. Basic Authentication Setup","text":"PythonJava <pre><code>import requests\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\nclass GoogleMapsClient:\n    def__init__(self):\n        self.api_key = os.getenv(\"GOOGLE_MAPS_API_KEY\")\n        if not self.api_key:\n            raise ValueError(\"GOOGLE_MAPS_API_KEY not found in environment\")\n\nself.base_url = \"https://maps.googleapis.com/maps/api\"\n\ndef make_request(self, endpoint, params):\n        \"\"\"Make a request to Google Maps API.\"\"\"\n        url = f\"{self.base_url}/{endpoint}\"\n        params[\"key\"] = self.api_key\n\nresponse = requests.get(url, params=params)\n        response.raise_for_status()\n        return response.json()\n\n# Usage\nclient = GoogleMapsClient()\n</code></pre> <pre><code>import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\npublic class GoogleMapsClient {\n    private final String apiKey;\n    private final String baseUrl = \"https://maps.googleapis.com/maps/api\";\n    private final HttpClient client = HttpClient.newHttpClient();\n    private final Gson gson = new Gson();\n\npublic GoogleMapsClient() {\n        this.apiKey = System.getenv(\"GOOGLE_MAPS_API_KEY\");\n        if (this.apiKey == null || this.apiKey.isEmpty()) {\n            throw new IllegalStateException(\"GOOGLE_MAPS_API_KEY not found in environment\");\n        }\n    }\n\npublic JsonObject makeRequest(String endpoint, Map&lt;String, String&gt; params) throws Exception {\n        StringBuilder urlBuilder = new StringBuilder(baseUrl + \"/\" + endpoint + \"?\");\n        params.put(\"key\", apiKey);\n\nfor (Map.Entry&lt;String, String&gt; entry : params.entrySet()) {\n            urlBuilder.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8))\n                     .append(\"=\")\n                     .append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8))\n                     .append(\"&amp;\");\n        }\n\nString url = urlBuilder.toString();\n        if (url.endsWith(\"&amp;\")) {\n            url = url.substring(0, url.length() - 1);\n        }\n\nHttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .build();\n\nHttpResponse`&lt;String&gt;` response = client.send(request,\n            HttpResponse.BodyHandlers.ofString());\n\nreturn gson.fromJson(response.body(), JsonObject.class);\n    }\n}\n</code></pre>"},{"location":"how-to-guide/#2-your-first-api-call","title":"2. Your First API Call","text":"PythonJava <pre><code>def first_geocoding_call():\n    \"\"\"Make your first API call to geocode an address.\"\"\"\n    client = GoogleMapsClient()\n\n# Geocode an address\n    params = {\n        \"address\": \"1600 Amphitheatre Parkway, Mountain View, CA\"\n    }\n\ntry:\n        response = client.make_request(\"geocode/json\", params)\n\nif response[\"status\"] == \"OK\":\n            result = response[\"results\"][0]\n            location = result[\"geometry\"][\"location\"]\n\nprint(f\"Successfully geocoded address!\")\n            print(f\"Address: {result['formatted_address']}\")\n            print(f\"Latitude: {location['lat']}\")\n            print(f\"Longitude: {location['lng']}\")\n        else:\n            print(f\"Geocoding failed: {response['status']}\")\n\nexcept Exception as e:\n        print(f\"Error: {e}\")\n\n# Run your first API call\nfirst_geocoding_call()\n</code></pre> <pre><code>public void firstGeocodingCall() {\n    GoogleMapsClient client = new GoogleMapsClient();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"address\", \"1600 Amphitheatre Parkway, Mountain View, CA\");\n\ntry {\n        JsonObject response = client.makeRequest(\"geocode/json\", params);\n\nif (\"OK\".equals(response.get(\"status\").getAsString())) {\n            JsonObject result = response.getAsJsonArray(\"results\").get(0).getAsJsonObject();\n            JsonObject geometry = result.getAsJsonObject(\"geometry\");\n            JsonObject location = geometry.getAsJsonObject(\"location\");\n\nSystem.out.println(\"Successfully geocoded address!\");\n            System.out.println(\"Address: \" + result.get(\"formatted_address\").getAsString());\n            System.out.println(\"Latitude: \" + location.get(\"lat\").getAsDouble());\n            System.out.println(\"Longitude: \" + location.get(\"lng\").getAsDouble());\n        } else {\n            System.out.println(\"Geocoding failed: \" + response.get(\"status\").getAsString());\n        }\n\n} catch (Exception e) {\n        System.out.println(\"Error: \" + e.getMessage());\n    }\n}\n</code></pre>"},{"location":"how-to-guide/#3-error-handling","title":"3. Error Handling","text":"PythonJava <pre><code>def robust_api_call(endpoint, params):\n    \"\"\"Make an API call with proper error handling.\"\"\"\n    client = GoogleMapsClient()\n\ntry:\n        response = client.make_request(endpoint, params)\n\n# Check API response status\n        status = response.get(\"status\")\n\nif status == \"OK\":\n            return {\"success\": True, \"data\": response}\n        elif status == \"ZERO_RESULTS\":\n            return {\"success\": False, \"error\": \"No results found\"}\n        elif status == \"OVER_QUERY_LIMIT\":\n            return {\"success\": False, \"error\": \"Quota exceeded\"}\n        elif status == \"REQUEST_DENIED\":\n            return {\"success\": False, \"error\": \"API key invalid or restricted\"}\n        else:\n            return {\"success\": False, \"error\": f\"API Error: {status}\"}\n\nexcept requests.RequestException as e:\n        return {\"success\": False, \"error\": f\"Network error: {e}\"}\n    except Exception as e:\n        return {\"success\": False, \"error\": f\"Unexpected error: {e}\"}\n\n# Usage\nresult = robust_api_call(\"geocode/json\", {\"address\": \"Test Address\"})\nif result[\"success\"]:\n    print(\"API call successful\")\nelse:\n    print(f\"Error: {result['error']}\")\n</code></pre> <pre><code>public ApiResult robustApiCall(String endpoint, Map&lt;String, String&gt; params) {\n    GoogleMapsClient client = new GoogleMapsClient();\n\ntry {\n        JsonObject response = client.makeRequest(endpoint, params);\n\nString status = response.get(\"status\").getAsString();\n\nswitch (status) {\n            case \"OK\":\n                return new ApiResult(true, response, null);\n            case \"ZERO_RESULTS\":\n                return new ApiResult(false, null, \"No results found\");\n            case \"OVER_QUERY_LIMIT\":\n                return new ApiResult(false, null, \"Quota exceeded\");\n            case \"REQUEST_DENIED\":\n                return new ApiResult(false, null, \"API key invalid or restricted\");\n            default:\n                return new ApiResult(false, null, \"API Error: \" + status);\n        }\n\n} catch (Exception e) {\n        return new ApiResult(false, null, \"Error: \" + e.getMessage());\n    }\n}\n\npublic class ApiResult {\n    private final boolean success;\n    private final JsonObject data;\n    private final String error;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"how-to-guide/#advanced-queries","title":"Advanced Queries","text":""},{"location":"how-to-guide/#1-complex-geocoding","title":"1. Complex Geocoding","text":"PythonJava <pre><code>def advanced_geocoding():\n    \"\"\"Advanced geocoding with multiple parameters.\"\"\"\n    client = GoogleMapsClient()\n\n# Geocode with region biasing and language\n    params = {\n        \"address\": \"Toledo\",\n        \"region\": \"es\",  # Bias towards Spain\n        \"language\": \"es\",  # Spanish results\n        \"components\": \"country:ES\"  # Restrict to Spain\n    }\n\nresponse = client.make_request(\"geocode/json\", params)\n\nif response[\"status\"] == \"OK\":\n        for result in response[\"results\"]:\n            print(f\"Address: {result['formatted_address']}\")\n            print(f\"Types: {', '.join(result['types'])}\")\n            print(\"---\")\n</code></pre> <pre><code>public void advancedGeocoding() throws Exception {\n    GoogleMapsClient client = new GoogleMapsClient();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"address\", \"Toledo\");\n    params.put(\"region\", \"es\");  // Bias towards Spain\n    params.put(\"language\", \"es\");  // Spanish results\n    params.put(\"components\", \"country:ES\");  // Restrict to Spain\n\nJsonObject response = client.makeRequest(\"geocode/json\", params);\n\nif (\"OK\".equals(response.get(\"status\").getAsString())) {\n        JsonArray results = response.getAsJsonArray(\"results\");\n        for (int i = 0; i &lt; results.size(); i++) {\n            JsonObject result = results.get(i).getAsJsonObject();\n            System.out.println(\"Address: \" + result.get(\"formatted_address\").getAsString());\n\nJsonArray types = result.getAsJsonArray(\"types\");\n            StringBuilder typesStr = new StringBuilder();\n            for (int j = 0; j &lt; types.size(); j++) {\n                if (j &gt; 0) typesStr.append(\", \");\n                typesStr.append(types.get(j).getAsString());\n            }\n            System.out.println(\"Types: \" + typesStr.toString());\n            System.out.println(\"---\");\n        }\n    }\n}\n</code></pre>"},{"location":"how-to-guide/#2-multi-waypoint-directions","title":"2. Multi-Waypoint Directions","text":"PythonJava <pre><code>def multi_waypoint_directions():\n    \"\"\"Get directions with multiple waypoints.\"\"\"\n    client = GoogleMapsClient()\n\n# Route with multiple waypoints\n    params = {\n        \"origin\": \"San Francisco, CA\",\n        \"destination\": \"Los Angeles, CA\",\n        \"waypoints\": \"optimize:true|Sacramento, CA|Fresno, CA\",\n        \"mode\": \"driving\",\n        \"avoid\": \"highways\"\n    }\n\nresponse = client.make_request(\"directions/json\", params)\n\nif response[\"status\"] == \"OK\":\n        route = response[\"routes\"][0]\n        legs = route[\"legs\"]\n\nprint(\"Multi-waypoint route:\")\n        for i, leg in enumerate(legs):\n            print(f\"Leg {i+1}: {leg['start_address']} \u2192 {leg['end_address']}\")\n            print(f\"  Distance: {leg['distance']['text']}\")\n            print(f\"  Duration: {leg['duration']['text']}\")\n            print()\n</code></pre> <pre><code>public void multiWaypointDirections() throws Exception {\n    GoogleMapsClient client = new GoogleMapsClient();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"origin\", \"San Francisco, CA\");\n    params.put(\"destination\", \"Los Angeles, CA\");\n    params.put(\"waypoints\", \"optimize:true|Sacramento, CA|Fresno, CA\");\n    params.put(\"mode\", \"driving\");\n    params.put(\"avoid\", \"highways\");\n\nJsonObject response = client.makeRequest(\"directions/json\", params);\n\nif (\"OK\".equals(response.get(\"status\").getAsString())) {\n        JsonObject route = response.getAsJsonArray(\"routes\").get(0).getAsJsonObject();\n        JsonArray legs = route.getAsJsonArray(\"legs\");\n\nSystem.out.println(\"Multi-waypoint route:\");\n        for (int i = 0; i &lt; legs.size(); i++) {\n            JsonObject leg = legs.get(i).getAsJsonObject();\n            System.out.println(\"Leg \" + (i+1) + \": \" +\n                leg.get(\"start_address\").getAsString() + \" \u2192 \" +\n                leg.get(\"end_address\").getAsString());\n            System.out.println(\"  Distance: \" +\n                leg.getAsJsonObject(\"distance\").get(\"text\").getAsString());\n            System.out.println(\"  Duration: \" +\n                leg.getAsJsonObject(\"duration\").get(\"text\").getAsString());\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"how-to-guide/#3-advanced-place-search","title":"3. Advanced Place Search","text":"PythonJava <pre><code>def advanced_place_search():\n    \"\"\"Advanced place search with filters.\"\"\"\n    client = GoogleMapsClient()\n\n# Search for restaurants near a location\n    params = {\n        \"location\": \"37.7749,-122.4194\",  # San Francisco\n        \"radius\": \"5000\",  # 5km radius\n        \"type\": \"restaurant\",\n        \"keyword\": \"pizza\",\n        \"minprice\": \"1\",\n        \"maxprice\": \"3\",\n        \"opennow\": \"true\"\n    }\n\nresponse = client.make_request(\"place/nearbysearch/json\", params)\n\nif response[\"status\"] == \"OK\":\n        places = response[\"results\"]\n        print(f\"Found {len(places)} pizza restaurants:\")\n\nfor place in places:\n            print(f\"  - {place['name']}\")\n            print(f\"    Rating: {place.get('rating', 'N/A')}\")\n            print(f\"    Price Level: {'$' * place.get('price_level', 0)}\")\n            print(f\"    Address: {place['vicinity']}\")\n            print()\n</code></pre> <pre><code>public void advancedPlaceSearch() throws Exception {\n    GoogleMapsClient client = new GoogleMapsClient();\n\nMap&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"location\", \"37.7749,-122.4194\");  // San Francisco\n    params.put(\"radius\", \"5000\");  // 5km radius\n    params.put(\"type\", \"restaurant\");\n    params.put(\"keyword\", \"pizza\");\n    params.put(\"minprice\", \"1\");\n    params.put(\"maxprice\", \"3\");\n    params.put(\"opennow\", \"true\");\n\nJsonObject response = client.makeRequest(\"place/nearbysearch/json\", params);\n\nif (\"OK\".equals(response.get(\"status\").getAsString())) {\n        JsonArray places = response.getAsJsonArray(\"results\");\n        System.out.println(\"Found \" + places.size() + \" pizza restaurants:\");\n\nfor (int i = 0; i &lt; places.size(); i++) {\n            JsonObject place = places.get(i).getAsJsonObject();\n            System.out.println(\"  - \" + place.get(\"name\").getAsString());\n            System.out.println(\"    Rating: \" +\n                (place.has(\"rating\") ? place.get(\"rating\").getAsString() : \"N/A\"));\n\nint priceLevel = place.has(\"price_level\") ? place.get(\"price_level\").getAsInt() : 0;\n            StringBuilder priceStr = new StringBuilder();\n            for (int j = 0; j &lt; priceLevel; j++) {\n                priceStr.append(\"$\");\n            }\n            System.out.println(\"    Price Level: \" + priceStr.toString());\n            System.out.println(\"    Address: \" + place.get(\"vicinity\").getAsString());\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"how-to-guide/#4-batch-processing","title":"4. Batch Processing","text":"PythonJava <pre><code>import asyncio\nimport aiohttp\n\nasync def batch_geocoding(addresses):\n    \"\"\"Geocode multiple addresses concurrently.\"\"\"\n    client = GoogleMapsClient()\n\nasync def geocode_address(session, address):\n        params = {\"address\": address}\n        url = f\"{client.base_url}/geocode/json\"\n        params[\"key\"] = client.api_key\n\nasync with session.get(url, params=params) as response:\n            data = await response.json()\n            return {\"address\": address, \"result\": data}\n\nasync with aiohttp.ClientSession() as session:\n        tasks = [geocode_address(session, addr) for addr in addresses]\n        results = await asyncio.gather(*tasks)\n\nfor result in results:\n            if result[\"result\"][\"status\"] == \"OK\":\n                location = result[\"result\"][\"results\"][0][\"geometry\"][\"location\"]\n                print(f\"{result['address']}: {location['lat']}, {location['lng']}\")\n            else:\n                print(f\"{result['address']}: {result['result']['status']}\")\n\n# Usage\naddresses = [\n    \"1600 Amphitheatre Parkway, Mountain View, CA\",\n    \"1 Infinite Loop, Cupertino, CA\",\n    \"3500 Deer Creek Road, Palo Alto, CA\"\n]\n\nasyncio.run(batch_geocoding(addresses))\n</code></pre> <pre><code>import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic void batchGeocoding(List`&lt;String&gt;` addresses) {\n    GoogleMapsClient client = new GoogleMapsClient();\n    ExecutorService executor = Executors.newFixedThreadPool(10);\n\nList&lt;CompletableFuture`&lt;GeocodingResult&gt;`&gt; futures = addresses.stream()\n        .map(address -&gt; CompletableFuture.supplyAsync(() -&gt; {\n            try {\n                Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\n                params.put(\"address\", address);\n                JsonObject response = client.makeRequest(\"geocode/json\", params);\n\nif (\"OK\".equals(response.get(\"status\").getAsString())) {\n                    JsonObject result = response.getAsJsonArray(\"results\").get(0).getAsJsonObject();\n                    JsonObject location = result.getAsJsonObject(\"geometry\").getAsJsonObject(\"location\");\n                    return new GeocodingResult(address,\n                        location.get(\"lat\").getAsDouble(),\n                        location.get(\"lng\").getAsDouble(),\n                        true, null);\n                } else {\n                    return new GeocodingResult(address, 0, 0, false,\n                        response.get(\"status\").getAsString());\n                }\n            } catch (Exception e) {\n                return new GeocodingResult(address, 0, 0, false, e.getMessage());\n            }\n        }, executor))\n        .collect(Collectors.toList());\n\n// Wait for all results\n    CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\n\n// Process results\n    for (CompletableFuture`&lt;GeocodingResult&gt;` future : futures) {\n        GeocodingResult result = future.get();\n        if (result.isSuccess()) {\n            System.out.println(\" \" + result.getAddress() + \": \" +\n                result.getLatitude() + \", \" + result.getLongitude());\n        } else {\n            System.out.println(\" \" + result.getAddress() + \": \" + result.getError());\n        }\n    }\n\nexecutor.shutdown();\n}\n\npublic class GeocodingResult {\n    private final String address;\n    private final double latitude;\n    private final double longitude;\n    private final boolean success;\n    private final String error;\n\n// Constructor and getters\n}\n</code></pre>"},{"location":"how-to-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Code Samples for more implementation examples</li> <li>Check the Reference Guide for detailed API documentation</li> <li>Review Change History for recent updates</li> </ul>"},{"location":"rag-chatbot-example/","title":"RAG Chatbot Example","text":"<p>Let's put it all together and build a simple chatbot interface using Gradio.</p> <pre><code>import gradio as gr\n\ndef respond(question, history):\n    return qa(question)[\"result\"]\n\ngr.ChatInterface(\n    respond,\n    chatbot=gr.Chatbot(height=500),\n    textbox=gr.Textbox(placeholder=\"Ask me question related to Plants and their diseases\", container=False, scale=7),\n    title=\"Plant's Chatbot\",\n    examples=[\"What are different kinds of plant diseases\", \"What is Stewart\u2019s wilt disease\"],\n    cache_examples=True,\n    retry_btn=None,\n).launch(share=True)\n</code></pre> <p>This launches an interactive chatbot that uses your RAG pipeline to answer questions based on your documents. </p>"},{"location":"rag-overview/","title":"RAG Overview","text":"<p>Retrieval-Augmented Generation (RAG) is a powerful AI framework that grounds large language models (LLMs) with external sources, making their responses more accurate and up-to-date.</p>"},{"location":"rag-overview/#why-rag","title":"Why RAG?","text":"<p>LLMs are great at understanding language and context, but they have limitations:</p> <ul> <li>Hallucination: LLMs can confidently generate incorrect information.</li> <li>Limited by Training Data: They know nothing outside their training data.</li> <li>Black Box Outputs: It's hard to trace why a particular answer was generated.</li> </ul>"},{"location":"rag-overview/#rag-to-the-rescue","title":"RAG to the Rescue","text":"<p>RAG helps solve these problems by:</p> <ul> <li>Grounding answers in external knowledge (like PDFs, databases, or websites)</li> <li>Retrieving relevant information for each user query</li> <li>Providing context to the LLM so it can generate more reliable, traceable answers</li> </ul> <p>In the following steps, you'll see how to build a RAG pipeline using Langchain and Ollama.</p>"},{"location":"rag-step1-load-data/","title":"Step 1: Load Data","text":"<p>The first step in a RAG pipeline is to load your data. For this demo, we'll use a PDF about plant diseases, but you can use any relevant document.</p> PythonJava <pre><code># Python code for loading data\n# Example: Load documents from a directory\nfrom langchain.document_loaders import DirectoryLoader\nloader = DirectoryLoader('data/')\ndocs = loader.load()\n</code></pre> <pre><code>// Java code for loading data (hypothetical example)\n// Example: Load documents from a directory\nDirectoryLoader loader = new DirectoryLoader(\"data/\");\nList&lt;Document&gt; docs = loader.load();\n</code></pre> <p>This loads your PDF and lets you inspect its contents.</p>"},{"location":"rag-step2-split-document/","title":"Rag step2 split document","text":"<p>LLMs have a limited context window, so we split documents into smaller, meaningful chunks. This helps retrieve only the relevant information for each query.</p> PythonJava <pre><code>from langchain_experimental.text_splitter import SemanticChunker\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\ntext_splitter = SemanticChunker(HuggingFaceEmbeddings())\ndocuments = text_splitter.split_documents(docs)\n\nprint(\"Number of chunks created: \", len(documents))\n</code></pre> <pre><code>// Example using hypothetical Java library for text splitting\nTextSplitter splitter = new SemanticChunker(new HuggingFaceEmbeddings());\nList`&lt;Document&gt;` documents = splitter.splitDocuments(docs);\n\nSystem.out.println(\"Number of chunks created: \" + documents.size());\n</code></pre>"},{"location":"rag-step3-create-embeddings/","title":"Step 3: Create Embeddings","text":"<p>For each text chunk, we create embeddings\u2014numerical representations that capture semantic meaning. These are stored in a vector database for efficient search.</p> Python <pre><code>from langchain_community.embeddings import HuggingFaceEmbeddings\nfrom langchain_community.vectorstores import FAISS\n\nembedder = HuggingFaceEmbeddings()\nvector = FAISS.from_documents(documents, embedder)\n</code></pre> <p>Embeddings allow us to find the most relevant chunks for any user query.</p>"},{"location":"rag-step4-retrieval/","title":"Step 4: Retrieval","text":"<p>Now, we can retrieve the most semantically similar text chunks from the vector store based on a user query.</p> PythonJava <pre><code># Python code for retrieval\n# Example: Retrieve relevant chunks using a retriever\nretriever = FAISS.from_documents(documents, embeddings).as_retriever()\nrelevant_docs = retriever.get_relevant_documents(query)\n</code></pre> <pre><code>// Java code for retrieval (hypothetical example)\n// Example: Retrieve relevant chunks using a retriever\nRetriever retriever = FAISS.fromDocuments(documents, embeddings).asRetriever();\nList&lt;Document&gt; relevantDocs = retriever.getRelevantDocuments(query);\n</code></pre> <p>This step finds the best-matching information to ground the LLM's answer. </p>"},{"location":"rag-step5-generation/","title":"Step 5: Generation","text":"<p>With the relevant chunks retrieved, we pass them (along with the user query) to the LLM to generate a grounded, accurate answer.</p> PythonJava <pre><code># Python code for generation\n# Example: Generate answer using LLM\nfrom langchain.chains import RetrievalQA\nqa = RetrievalQA.from_chain_type(llm, retriever=retriever)\nanswer = qa.run(query)\n</code></pre> <pre><code>// Java code for generation (hypothetical example)\n// Example: Generate answer using LLM\nRetrievalQA qa = RetrievalQA.fromChainType(llm, retriever);\nString answer = qa.run(query);\n</code></pre> <p>The LLM uses the retrieved context to answer accurately and transparently. </p>"},{"location":"reference-guide/","title":"Reference Guide","text":"<p>Complete reference documentation for all Google Maps API endpoints, parameters, and responses.</p>"},{"location":"reference-guide/#api-overview","title":"API Overview","text":""},{"location":"reference-guide/#base-url","title":"Base URL","text":"<p>All Google Maps API requests use the base URL: <pre><code>https://maps.googleapis.com/maps/api/\n</code></pre></p>"},{"location":"reference-guide/#authentication","title":"Authentication","text":"<p>All requests require an API key passed as the <code>key</code> parameter.</p>"},{"location":"reference-guide/#response-format","title":"Response Format","text":"<p>All APIs return JSON responses with this structure: <pre><code>{\n  \"status\": \"OK\",\n  \"results\": [...],\n  \"error_message\": \"...\"\n}\n</code></pre></p>"},{"location":"reference-guide/#geocoding-api","title":"Geocoding API","text":""},{"location":"reference-guide/#endpoint","title":"Endpoint","text":"<pre><code>GET https://maps.googleapis.com/maps/api/geocode/json\n</code></pre>"},{"location":"reference-guide/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>address</code> string Yes* Address to geocode <code>latlng</code> string Yes* Coordinates to reverse geocode <code>components</code> string No Component filtering <code>bounds</code> string No Viewport biasing <code>language</code> string No Response language <code>region</code> string No Region biasing <code>key</code> string Yes Your API key <p>*Either <code>address</code> or <code>latlng</code> is required</p>"},{"location":"reference-guide/#example-request","title":"Example Request","text":"PythonJava <pre><code>import requests\n\ndef geocode_address(address, api_key):\n    url = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    params = {\n        \"address\": address,\n        \"key\": api_key\n    }\n\n    response = requests.get(url, params=params)\n    return response.json()\n</code></pre> <pre><code>public JsonObject geocodeAddress(String address, String apiKey) throws Exception {\n    String url = \"https://maps.googleapis.com/maps/api/geocode/json\";\n    Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"address\", address);\n    params.put(\"key\", apiKey);\n\n    // Implementation details...\n    return response;\n}\n</code></pre>"},{"location":"reference-guide/#response-structure","title":"Response Structure","text":"<pre><code>{\n  \"status\": \"OK\",\n  \"results\": [\n    {\n      \"formatted_address\": \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": 37.4221,\n          \"lng\": -122.0841\n        },\n        \"location_type\": \"ROOFTOP\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 37.4234499802915,\n            \"lng\": -122.0827500197085\n          },\n          \"southwest\": {\n            \"lat\": 37.4207520197085,\n            \"lng\": -122.0854499802915\n          }\n        }\n      },\n      \"place_id\": \"ChIJN1t_tDeuEmsRUsoyG83frY4\",\n      \"types\": [\"street_address\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"reference-guide/#status-codes","title":"Status Codes","text":"Status Description <code>OK</code> Request was successful <code>ZERO_RESULTS</code> No results found <code>OVER_QUERY_LIMIT</code> Quota exceeded <code>REQUEST_DENIED</code> API key invalid or restricted <code>INVALID_REQUEST</code> Missing required parameters"},{"location":"reference-guide/#directions-api","title":"Directions API","text":""},{"location":"reference-guide/#endpoint_1","title":"Endpoint","text":"<pre><code>GET https://maps.googleapis.com/maps/api/directions/json\n</code></pre>"},{"location":"reference-guide/#parameters_1","title":"Parameters","text":"Parameter Type Required Description <code>origin</code> string Yes Starting location <code>destination</code> string Yes Ending location <code>waypoints</code> string No Intermediate locations <code>mode</code> string No Transportation mode <code>alternatives</code> boolean No Return alternative routes <code>avoid</code> string No Route restrictions <code>language</code> string No Response language <code>units</code> string No Distance units <code>key</code> string Yes Your API key"},{"location":"reference-guide/#transportation-modes","title":"Transportation Modes","text":"Mode Description <code>driving</code> Car directions <code>walking</code> Walking directions <code>bicycling</code> Bicycle directions <code>transit</code> Public transit directions"},{"location":"reference-guide/#example-request_1","title":"Example Request","text":"PythonJava <pre><code>def get_directions(origin, destination, mode=\"driving\"):\n    url = \"https://maps.googleapis.com/maps/api/directions/json\"\n    params = {\n        \"origin\": origin,\n        \"destination\": destination,\n        \"mode\": mode,\n        \"key\": api_key\n    }\n\n    response = requests.get(url, params=params)\n    return response.json()\n</code></pre> <pre><code>public JsonObject getDirections(String origin, String destination, String mode) throws Exception {\n    String url = \"https://maps.googleapis.com/maps/api/directions/json\";\n    Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"origin\", origin);\n    params.put(\"destination\", destination);\n    params.put(\"mode\", mode);\n    params.put(\"key\", apiKey);\n\n    // Implementation details...\n    return response;\n}\n</code></pre>"},{"location":"reference-guide/#response-structure_1","title":"Response Structure","text":"<pre><code>{\n  \"status\": \"OK\",\n  \"routes\": [\n    {\n      \"bounds\": {\n        \"northeast\": {\"lat\": 42.3601, \"lng\": -71.0589},\n        \"southwest\": {\"lat\": 40.7128, \"lng\": -74.0060}\n      },\n      \"legs\": [\n        {\n          \"distance\": {\n            \"text\": \"215 mi\",\n            \"value\": 345600\n          },\n          \"duration\": {\n            \"text\": \"3 hours 45 mins\",\n            \"value\": 13500\n          },\n          \"start_address\": \"New York, NY, USA\",\n          \"end_address\": \"Boston, MA, USA\",\n          \"steps\": [...]\n        }\n      ],\n      \"overview_polyline\": {\n        \"points\": \"encoded_polyline_string\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"reference-guide/#places-api","title":"Places API","text":""},{"location":"reference-guide/#nearby-search-endpoint","title":"Nearby Search Endpoint","text":"<pre><code>GET https://maps.googleapis.com/maps/api/place/nearbysearch/json\n</code></pre>"},{"location":"reference-guide/#parameters_2","title":"Parameters","text":"Parameter Type Required Description <code>location</code> string Yes Center point (lat,lng) <code>radius</code> integer Yes* Search radius in meters <code>type</code> string No Place type filter <code>keyword</code> string No Search keyword <code>minprice</code> integer No Minimum price level <code>maxprice</code> integer No Maximum price level <code>opennow</code> boolean No Only open places <code>key</code> string Yes Your API key <p>*Required unless <code>rankby=distance</code></p>"},{"location":"reference-guide/#find-place-endpoint","title":"Find Place Endpoint","text":"<pre><code>GET https://maps.googleapis.com/maps/api/place/findplacefromtext/json\n</code></pre>"},{"location":"reference-guide/#parameters_3","title":"Parameters","text":"Parameter Type Required Description <code>input</code> string Yes Text input <code>inputtype</code> string Yes Input type <code>fields</code> string Yes Response fields <code>locationbias</code> string No Location biasing <code>key</code> string Yes Your API key"},{"location":"reference-guide/#example-request_2","title":"Example Request","text":"PythonJava <pre><code>def nearby_search(lat, lng, radius, place_type=None):\n    url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n    params = {\n        \"location\": f\"{lat},{lng}\",\n        \"radius\": radius,\n        \"key\": api_key\n    }\n\n    if place_type:\n        params[\"type\"] = place_type\n\n    response = requests.get(url, params=params)\n    return response.json()\n</code></pre> <pre><code>public JsonObject nearbySearch(double lat, double lng, int radius, String placeType) throws Exception {\n    String url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\";\n    Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"location\", lat + \",\" + lng);\n    params.put(\"radius\", String.valueOf(radius));\n    params.put(\"key\", apiKey);\n\n    if (placeType != null) {\n        params.put(\"type\", placeType);\n    }\n\n    // Implementation details...\n    return response;\n}\n</code></pre>"},{"location":"reference-guide/#response-structure_2","title":"Response Structure","text":"<pre><code>{\n  \"status\": \"OK\",\n  \"results\": [\n    {\n      \"name\": \"Restaurant Name\",\n      \"place_id\": \"ChIJN1t_tDeuEmsRUsoyG83frY4\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": 37.4221,\n          \"lng\": -122.0841\n        }\n      },\n      \"vicinity\": \"123 Main St, City, State\",\n      \"rating\": 4.5,\n      \"types\": [\"restaurant\", \"food\", \"establishment\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"reference-guide/#distance-matrix-api","title":"Distance Matrix API","text":""},{"location":"reference-guide/#endpoint_2","title":"Endpoint","text":"<pre><code>GET https://maps.googleapis.com/maps/api/distancematrix/json\n</code></pre>"},{"location":"reference-guide/#parameters_4","title":"Parameters","text":"Parameter Type Required Description <code>origins</code> string Yes Starting locations <code>destinations</code> string Yes Ending locations <code>mode</code> string No Transportation mode <code>language</code> string No Response language <code>units</code> string No Distance units <code>key</code> string Yes Your API key"},{"location":"reference-guide/#example-request_3","title":"Example Request","text":"PythonJava <pre><code>def distance_matrix(origins, destinations, mode=\"driving\"):\n    url = \"https://maps.googleapis.com/maps/api/distancematrix/json\"\n    params = {\n        \"origins\": \"|\".join(origins),\n        \"destinations\": \"|\".join(destinations),\n        \"mode\": mode,\n        \"key\": api_key\n    }\n\n    response = requests.get(url, params=params)\n    return response.json()\n</code></pre> <pre><code>public JsonObject distanceMatrix(List&lt;String&gt; origins, List&lt;String&gt; destinations, String mode) throws Exception {\n    String url = \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n    Map&lt;String, String&gt; params = new HashMap&lt;&gt;();\n    params.put(\"origins\", String.join(\"|\", origins));\n    params.put(\"destinations\", String.join(\"|\", destinations));\n    params.put(\"mode\", mode);\n    params.put(\"key\", apiKey);\n\n    // Implementation details...\n    return response;\n}\n</code></pre>"},{"location":"reference-guide/#response-structure_3","title":"Response Structure","text":"<pre><code>{\n  \"status\": \"OK\",\n  \"origin_addresses\": [\"New York, NY, USA\"],\n  \"destination_addresses\": [\"Boston, MA, USA\"],\n  \"rows\": [\n    {\n      \"elements\": [\n        {\n          \"distance\": {\n            \"text\": \"215 mi\",\n            \"value\": 345600\n          },\n          \"duration\": {\n            \"text\": \"3 hours 45 mins\",\n            \"value\": 13500\n          },\n          \"status\": \"OK\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"reference-guide/#maps-javascript-api","title":"Maps JavaScript API","text":""},{"location":"reference-guide/#loading-the-api","title":"Loading the API","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"map\" style=\"height: 400px; width: 100%;\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n        function initMap() {\n            const map = new google.maps.Map(document.getElementById(\"map\"), {\n                center: { lat: -34.397, lng: 150.644 },\n                zoom: 8,\n            });\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"reference-guide/#basic-map","title":"Basic Map","text":"JavaScript <pre><code>function createBasicMap() {\n    const map = new google.maps.Map(document.getElementById(\"map\"), {\n        center: { lat: 37.7749, lng: -122.4194 },\n        zoom: 12,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    });\n}\n</code></pre>"},{"location":"reference-guide/#adding-markers","title":"Adding Markers","text":"JavaScript <pre><code>function addMarker(map, position, title) {\n    const marker = new google.maps.Marker({\n        position: position,\n        map: map,\n        title: title\n    });\n\n    return marker;\n}\n\n// Usage\nconst map = createBasicMap();\nconst marker = addMarker(map, \n    { lat: 37.7749, lng: -122.4194 }, \n    \"San Francisco\"\n);\n</code></pre>"},{"location":"reference-guide/#info-windows","title":"Info Windows","text":"JavaScript <pre><code>function addInfoWindow(marker, content) {\n    const infoWindow = new google.maps.InfoWindow({\n        content: content\n    });\n\n    marker.addListener(\"click\", () =&gt; {\n        infoWindow.open(map, marker);\n    });\n\n    return infoWindow;\n}\n</code></pre>"},{"location":"reference-guide/#error-handling","title":"Error Handling","text":""},{"location":"reference-guide/#common-error-responses","title":"Common Error Responses","text":"<pre><code>{\n  \"status\": \"REQUEST_DENIED\",\n  \"error_message\": \"This API project is not authorized. Please ensure this API is enabled in the Google Cloud Console.\"\n}\n</code></pre>"},{"location":"reference-guide/#error-status-codes","title":"Error Status Codes","text":"Status HTTP Code Description <code>OK</code> 200 Request successful <code>ZERO_RESULTS</code> 200 No results found <code>OVER_QUERY_LIMIT</code> 429 Quota exceeded <code>REQUEST_DENIED</code> 403 API key invalid or restricted <code>INVALID_REQUEST</code> 400 Missing required parameters <code>UNKNOWN_ERROR</code> 500 Server error"},{"location":"reference-guide/#error-handling-implementation","title":"Error Handling Implementation","text":"PythonJava <pre><code>def handle_api_error(response):\n    status = response.get(\"status\")\n\n    error_messages = {\n        \"ZERO_RESULTS\": \"No results found for the given query.\",\n        \"OVER_QUERY_LIMIT\": \"Quota exceeded. Please try again later.\",\n        \"REQUEST_DENIED\": \"API key invalid or restricted.\",\n        \"INVALID_REQUEST\": \"Invalid request parameters.\",\n        \"UNKNOWN_ERROR\": \"An unknown error occurred.\"\n    }\n\n    if status in error_messages:\n        raise Exception(error_messages[status])\n    elif status != \"OK\":\n        raise Exception(f\"API Error: {status}\")\n</code></pre> <pre><code>public void handleApiError(JsonObject response) throws Exception {\n    String status = response.get(\"status\").getAsString();\n\n    switch (status) {\n        case \"ZERO_RESULTS\":\n            throw new Exception(\"No results found for the given query.\");\n        case \"OVER_QUERY_LIMIT\":\n            throw new Exception(\"Quota exceeded. Please try again later.\");\n        case \"REQUEST_DENIED\":\n            throw new Exception(\"API key invalid or restricted.\");\n        case \"INVALID_REQUEST\":\n            throw new Exception(\"Invalid request parameters.\");\n        case \"UNKNOWN_ERROR\":\n            throw new Exception(\"An unknown error occurred.\");\n        case \"OK\":\n            return;\n        default:\n            throw new Exception(\"API Error: \" + status);\n    }\n}\n</code></pre>"},{"location":"reference-guide/#rate-limiting","title":"Rate Limiting","text":""},{"location":"reference-guide/#quotas","title":"Quotas","text":"Service Free Tier Paid Tier Geocoding API 2,500 requests/day 100,000 requests/day Directions API 2,500 requests/day 100,000 requests/day Places API 1,000 requests/day 150,000 requests/day Distance Matrix API 100 requests/day 100,000 requests/day Maps JavaScript API 28,500 map loads/month 850,000 map loads/month"},{"location":"reference-guide/#rate-limiting-implementation","title":"Rate Limiting Implementation","text":"PythonJava <pre><code>import time\nfrom collections import defaultdict\n\nclass RateLimiter:\n    def __init__(self, max_requests_per_day):\n        self.max_requests = max_requests_per_day\n        self.requests_today = defaultdict(int)\n\n    def can_make_request(self):\n        today = time.strftime(\"%Y-%m-%d\")\n        if self.requests_today[today] &lt; self.max_requests:\n            self.requests_today[today] += 1\n            return True\n        return False\n\n    def wait_if_needed(self):\n        while not self.can_make_request():\n            time.sleep(60)  # Wait 1 minute\n</code></pre> <pre><code>import java.time.LocalDate;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class RateLimiter {\n    private final int maxRequestsPerDay;\n    private final ConcurrentHashMap&lt;LocalDate, Integer&gt; requestsToday = new ConcurrentHashMap&lt;&gt;();\n\n    public RateLimiter(int maxRequestsPerDay) {\n        this.maxRequestsPerDay = maxRequestsPerDay;\n    }\n\n    public boolean canMakeRequest() {\n        LocalDate today = LocalDate.now();\n        int currentRequests = requestsToday.getOrDefault(today, 0);\n\n        if (currentRequests &lt; maxRequestsPerDay) {\n            requestsToday.put(today, currentRequests + 1);\n            return true;\n        }\n        return false;\n    }\n\n    public void waitIfNeeded() throws InterruptedException {\n        while (!canMakeRequest()) {\n            Thread.sleep(60000); // Wait 1 minute\n        }\n    }\n}\n</code></pre>"},{"location":"reference-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Check Code Samples for implementation examples</li> <li>Read the How-to Guide for step-by-step tutorials</li> <li>Review Change History for recent updates </li> </ul>"},{"location":"whats-next-cag-graph-rag/","title":"What's Next: CAG &amp; Graph RAG","text":""},{"location":"whats-next-cag-graph-rag/#graph-based-rag","title":"Graph-based RAG","text":"<p>Graph RAG leverages knowledge graphs or graph databases to enhance retrieval and reasoning. Instead of retrieving flat text chunks, it can:</p> <ul> <li>Traverse relationships: Find related entities, facts, or concepts.</li> <li>Reason over data: Use graph structure to answer complex queries.</li> <li>Combine structured and unstructured data: Blend graph data with traditional document retrieval for richer answers.</li> </ul>"},{"location":"whats-next-cag-graph-rag/#context-aware-generation-cag","title":"Context-Aware Generation (CAG)","text":"<p>CAG takes Retrieval-Augmented Generation a step further by making the generation process aware of additional context, such as user history, session data, or domain-specific rules. This leads to more relevant and personalized responses.</p> <ul> <li>Personalization: Tailor answers based on user profile or previous interactions.</li> <li>Session Awareness: Maintain context across multiple queries.</li> <li>Domain Adaptation: Use business logic or rules to guide the LLM.</li> </ul> <p>These advanced techniques unlock new possibilities for building intelligent, context-aware, and explainable AI systems. Stay tuned for more examples and tutorials! </p>"},{"location":"venv/Lib/site-packages/backrefs-5.9.dist-info/licenses/LICENSE/","title":"LICENSE","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) 2015 - 2025 Isaac Muse</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"venv/Lib/site-packages/idna-3.10.dist-info/LICENSE/","title":"LICENSE","text":"<p>BSD 3-Clause License</p> <p>Copyright (c) 2013-2024, Kim Davies and contributors. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright    notice, this list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its    contributors may be used to endorse or promote products derived from    this software without specific prior written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"venv/Lib/site-packages/markdown-3.8.2.dist-info/licenses/LICENSE/","title":"LICENSE","text":"<p>BSD 3-Clause License</p> <p>Copyright 2007, 2008 The Python Markdown Project (v. 1.7 and later) Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b) Copyright 2004 Manfred Stienstra (the original version)</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the documentation    and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its    contributors may be used to endorse or promote products derived from    this software without specific prior written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"venv/Lib/site-packages/mkdocs_get_deps-0.2.0.dist-info/licenses/LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2023 Oleh Prypin oleh@pryp.in</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"venv/Lib/site-packages/mkdocs_material_extensions-1.3.1.dist-info/licenses/LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright (c) 2021 Isaac Muse</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"venv/Lib/site-packages/pymdown_extensions-10.16.dist-info/licenses/LICENSE/","title":"License","text":""},{"location":"venv/Lib/site-packages/pymdown_extensions-10.16.dist-info/licenses/LICENSE/#pymdown-extensions","title":"PyMdown Extensions","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) 2014 - 2024 Isaac Muse</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"venv/Lib/site-packages/pymdown_extensions-10.16.dist-info/licenses/LICENSE/#superfences","title":"SuperFences","text":"<p><code>superfences.py</code> is derived from Python Markdown's fenced_code extension.</p> <pre><code>Fenced Code Extension for Python Markdown\n =========================================\nThis extension adds Fenced Code Blocks to Python-Markdown.\nSee &lt;https://python-markdown.github.io/extensions/fenced_code_blocks/&gt;\nfor documentation.\nOriginal code Copyright 2007-2008 [Waylan Limberg](http://achinghead.com/).\nAll changes Copyright 2008-2014 The Python Markdown Project\nLicense: [BSD](http://www.opensource.org/licenses/bsd-license.php)\n</code></pre>"},{"location":"venv/Lib/site-packages/pymdown_extensions-10.16.dist-info/licenses/LICENSE/#highlight","title":"Highlight","text":"<p><code>highlight.py</code> is derived from Python Markdown's CodeHilite extension.</p> <pre><code>CodeHilite Extension for Python-Markdown\n ========================================\nAdds code/syntax highlighting to standard Python-Markdown code blocks.\nSee &lt;https://python-markdown.github.io/extensions/code_hilite/&gt;\nfor documentation.\nOriginal code Copyright 2006-2008 [Waylan Limberg](http://achinghead.com/).\nAll changes Copyright 2008-2014 The Python Markdown Project\nLicense: [BSD](http://www.opensource.org/licenses/bsd-license.php)\n</code></pre>"},{"location":"venv/Lib/site-packages/pymdown_extensions-10.16.dist-info/licenses/LICENSE/#fancylists","title":"FancyLists","text":"<p><code>fancylists.py</code> is derived from Python Markdown's list handler.</p> <pre><code>Started by Manfred Stienstra (http://www.dwerg.net/).\nMaintained for a few years by Yuri Takhteyev (http://www.freewisdom.org).\nCurrently maintained by Waylan Limberg (https://github.com/waylan),\nDmitry Shachnev (https://github.com/mitya57) and Isaac Muse (https://github.com/facelessuser).\n\nCopyright 2007-2023 The Python Markdown Project (v. 1.7 and later)\nCopyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b)\nCopyright 2004 Manfred Stienstra (the original version)\n\nLicense: [BSD](http://www.opensource.org/licenses/bsd-license.php)\n</code></pre>"},{"location":"venv/Lib/site-packages/pymdown_extensions-10.16.dist-info/licenses/LICENSE/#gemoji-index","title":"Gemoji Index","text":"<p><code>gemoji_db.py</code> is generated from Gemoji's source code: @github/gemoji.</p> <pre><code>Copyright (c) 2013 GitHub, Inc.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"venv/Lib/site-packages/pymdown_extensions-10.16.dist-info/licenses/LICENSE/#emojione-index","title":"EmojiOne Index","text":"<p><code>emoji1_db.py</code> is generated from EmojiOne's source code: @Ranks/emojione</p> <pre><code>EmojiOne Non-Artwork\n\nApplies to the JavaScript, JSON, PHP, CSS, HTML files, and everything else not covered under the artwork license above.\nLicense: MIT\nComplete Legal Terms: http://opensource.org/licenses/MIT\n</code></pre>"}]}